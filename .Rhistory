xyplot(Life.Exp ~ Income | region,data=state,layout=c(4,1))
xyplot(Life.Exp ~ Income | region,data=state,layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
ggplot2(disp,hwy,data=mpg)
ggplot(disp,hwy,data=mpg)
ggplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
boxplot(airquality$Month)
table(airquality$Month)
boxplot(Ozone~Month,data=airquality)
boxplot(Ozone~Month,data=airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
par()
length(par())
par(yaxt)
par("pch")
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$Wind,airquality$Ozone,type ="n")
title(main="Wind and Ozone in NYC")
may <- subset(airquality,Month==5)
with(may,points(Wind,Ozone,col="blue",pch=2))
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <-subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=11)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend = c("May","Other Months"))
abline(median(airquality$Wind),lty=2,lwd=2)
abline(h=median(airquality$Wind),lty=2,lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext ("Ozone and Weather in New York City",outer=TRUE)
library(swirl)
swirl()
head(airquality)
xplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data=airquality, layout = c(5,1))
xyplot(Ozone~Wind | as.factor(Month), data=airquality)
xyplot(Ozone~Wind | as.factor(Month), data=airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
p<-xyplot(Ozone~Wind,data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile="plot1.R",local=TRUE)
source("plot1.R",local=TRUE)
pathtofile("plot1.R",local=TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str()
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat | color*cut,data = diamonds,strip = FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat | color*cut,data = diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(),10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
seq(0,1,len=6)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3<-colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols<-brewer.pal(3,"BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(cols(20))
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
swirl()
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,col=drv)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(hwy,data=mpg,color=drv)
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv,hwy,data=mpg,geom=c("boxplot"))
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hxy,data=mpg,fill=drv)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets=drv`.,binwidth=2)
)
histogram(hwy,data=mpg,facets=drv`.,binwidth=2)
histogram(hwy,data=mpg,facets=drv`.,binwidth=2)
qplot(hwy,data=mpg,facets = drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets = .~drv)
g<- ggplot(mpg,plot(displ,hwy))
g<- ggplot(mpg, plot(displ,hwy))
head(mpg)
g <- ggplot(mpg, aes(displ,hwy) )
g
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink,size=4,alpha=1/2")+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2")+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(size=4,alpha=1/2,aes(color=drv))+labs(title("Swirl Rules!"))+labs(x="Displacement",y="Hwy Mileage")
g + geom_point(aes(color  =drv)) + labs(title("Swirl Rules!")) + labs(x="Displacement",y="Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g+geom_point(size=2,alpha=1/2,aes(color=drv))+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx,myy,type="l",ylim = c(-3,3))
g<-ggplot(data=testdat,x=myx,y=myy)
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy))
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line(0)
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g + geom_line()
g + geom_line() +ylim(-3,3)
g + geom_line() +coord_cartesian(ylim(-3,3))
g + geom_line() +coord_cartesian(ylim=c(-3,3))
g<-ggplot(data=mpg,aes(displ,hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)+geom_smooth((method="lm",se=FALSE,size=2,color="black"))
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut())
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut
)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut
)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom=c("point","smooth"),method="lm")
qplot(carat,price,data=diamonds,color=cut,geom=(c("point","smooth"),method="lm")
qplot(carat,price,data=diamonds,color=cut,geom=(c("point","smooth"),method="lm"))
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, geom=c("point","smooth"),method="lm",facets = .~cut
)
qplot(carat,price,data=diamonds, color=cut, geom=c("point","smooth"),method="lm",facets = .~cut)
qplot(carat,price,data=diamonds, color=cut, geom=c("point","smooth"),facets = .~cut)
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g<-ggplot(data=diamonds,aes(depth,price))
g
summary(g)
g+geom_poin(alpha=1/3)
g+geom_point(alpha=1/3)
cutpoints <-quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat,cutpoints)
g<-ggplot(data=diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method = "lm",size=3,color="pink")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method = "lm",size=3,color="pink")
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=.4,col="red")
5
5
abline(h=.8,col="red")
abline(h=0)
abline(h=0.1)
3
4
info()
skip()
abline(h=.5,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red", "orange", "purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
which.min(distTmp)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1(newClust))
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist()
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
plot(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
svd1$u %*% svd1$d %*% svd1$v
(svd1$u[,1] * svd1$d[,1]) %*% svd1$v
(svd1$u[,1] * svd1$d[1]) %*% svd1$v
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
image(a1)
myImage(a1)
a2 <- (svd1$u[,1:2]*svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a1)
myImage(a2)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
head(dataMatrix)
stop()
info()
main()
library(swirl)
swirl()
dim(ssd)
names(ssd[562:563,])
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1<-subset(ssd,boolean=1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
sub1[,1:12]
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist<-dist(sub[,1:3])
mdist<-dist(sub1[,1:3])
hclustering<-hclust(mdist)
myplclust(hclustering)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist<-dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1<-svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <-which.max(svd1$v[,2])
mdist<-dist(sub1[10:12])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <-kmeans(sub1[1:10],centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster,sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6,nstart = 100)
table(kClust$cluster,sub1$activity)
dim(kClust$centers)
laying<-which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub[,1:3])
names(sub[1:3])
names(sub1[1:3])
walkdown<-which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walkdown Cluster")
dim(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
info()
buy()
bye()
library(swirl)
swirl()
dim(pm0)
head(pm0)
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames,"|",fixed=TRUE)
cnames
names(pm0)<-make.names(cnames[[1]][wcol])
head(pm0)
x0<-pm0$Sample.Value
str(x0)
mean(is.na(xo))
mean(is.na(x0))
names(pm1)<-make.names(cnames[[1]][wcol])
dim(pm1)
x1<-pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative<-boolean x1<0
negative<-boolean (x1<0)
negative<-x1<0
sum(negative,na.rm = TRUE)
mean(negative,na.rm = TRUE)
dates<-pm1$Date
str(dates)
dates<-as.Dates(as.character(dates),"%Y%m%d")
dates<-as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative],"month")
str(site0)
both<-(site0,site1)
both<-intersect(site0,site1)
both
head(pm0)
cnt0<-subset(pm0,both %in% )
cnt0<-subset(pm0,both %in% pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow).
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub<-subset(cnt0,County.Code==63 & Site.ID==2008)
pm1sub<-subset(cnt1,County.Code==63 & Site.ID==2008)
x0sub<-pm0sub$Sample.Value
x1sub<-pm1sub$Sample.Value
dates0<-as.Date(ac.character(pm0sub$Date),"%Y%m%d")
dates0<-as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1<-as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow=c(1,2),mar=c(4,4,2,1))
plot(dates0,x0sub,pch=20)
abline(median(x0sub),lwd=2,na.rm=TRUE)
abline(median(x0sub,na.rm=TRUE),lwd=2)
abline(median(v=x0sub,na.rm=TRUE),lwd=2)
abline(v=median(x0sub,na.rm=TRUE),lwd=2)
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates1,x1sub,pch=20)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
rng<-range(x0sub,x1sub,na.rm=TRUE)
rng
mn0<-with(pm0,tapply(Sample.Value,State,Code,mean,na.rm=TRUE))
mn0<-with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1<-with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0),mean=mn0)
d1 <- data.frame(state=names(mn1),mean=mn1)
mrg<-merge(d0,d1,"state")
dim(mrg)
head(mrg)
points(mrg,plot(rep(1,52),mrg[,2],xlim=c(.5,2.5)))
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, plot(rep(2, 52), mrg[, 3], xlim = c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
with(mrg, plot(rep(2, 52), mrg[, 3], xlim = c(.5, 2.5)))
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y, ]
library(data.table)
library(ggplot2)
library(knitr)
Sys.setlocale("LC_TIME","en_US.UTF-8")
my_data <- data.table(read.csv("activity.csv", header=TRUE, na.strings="NA"))
setwd("~/RepData_PeerAssessment1")
my_data <- data.table(read.csv("activity.csv", header=TRUE, na.strings="NA"))
total_steps_by_date <-aggregate (steps ~ date,my_data,'sum',na.rm=TRUE)
qplot(steps, data = total_steps_by_date,binwidth=1000) +
ggtitle('Total number of steps / day')
#  Calculate and report the mean and median total number of steps taken per day
mean_total <- mean(total_steps_by_date$steps,na.rm=TRUE)
median_total <- median(total_steps_by_date$steps,na.rm=TRUE)
print(mean_total)
print(median_total)
average_steps_by_interval <- aggregate (steps ~ interval, my_data,'mean',na.rm=TRUE)
qplot(interval,steps, data=average_steps_by_interval )+geom_line()
+labs(title="average number of steps taken, averaged across all days")
qplot(interval,steps, data=average_steps_by_interval )+geom_line()
+ggtitle('average number of steps taken, averaged across all days')
average_steps_by_interval [ which.max(average_steps_by_interval $steps) ,]
sum(is.na(my_data))
clone_data <- my_data
clone_data$steps <- as.double(clone_data$steps)
for (i in 1:nrow(clone_data)) {
if (is.na(clone_data[i,]$steps)) {
clone_data[i,]$steps <- average_steps_by_interval[average_steps_by_interval$interval==clone_data[i,]$interval,]$steps
}
}
total_steps_by_clone_date <-aggregate (steps ~ date,my_data,'sum',na.rm=TRUE)
qplot(steps, data = total_steps_by_clone_dat,binwidth=1000) +
ggtitle('Total number of steps / day')
total_steps_by_clone_date <-aggregate (steps ~ date,my_data,'sum',na.rm=TRUE)
qplot(steps, data = total_steps_by_clone_date,binwidth=1000) +
ggtitle('Total number of steps / day')
clone_total_steps_by_date <-aggregate (steps ~ date,my_data,'sum',na.rm=TRUE)
qplot(steps, data = clone_total_steps_by_date,binwidth=1000) +
ggtitle('Total number of steps / day')
mean_clone_total <- mean(clone_total_steps_by_date$steps,na.rm=TRUE)
median_clone_total <- median(clone_total_steps_by_date$steps,na.rm=TRUE)
print(mean_clone_total)
print(median_clone_total)
mean_clone_total <- mean(clone_total_steps_by_date$steps,na.rm=TRUE)
median_clone_total <- median(clone_total_steps_by_date$steps,na.rm=TRUE)
print(mean_clone_total)
print(median_clone_total)
# Create a new dataset that is equal to the original dataset
# but with the missing data filled in
clone_data <- my_data
clone_data$steps <- as.double(clone_data$steps)
for (i in 1:nrow(clone_data)) {
if (is.na(clone_data[i,]$steps)) {
clone_data[i,]$steps <- average_steps_by_interval[average_steps_by_interval$interval==clone_data[i,]$interval,]$steps
}
}
# Make a histogram of the total number of steps taken each day
clone_total_steps_by_date <-aggregate (steps ~ date,my_data,'sum',na.rm=TRUE)
qplot(steps, data = clone_total_steps_by_date,binwidth=1000) +
ggtitle('Total number of steps / day')
# Calculate and report the mean and median total number of steps taken per day
mean_clone_total <- mean(clone_total_steps_by_date$steps,na.rm=TRUE)
median_clone_total <- median(clone_total_steps_by_date$steps,na.rm=TRUE)
print(mean_clone_total)
print(median_clone_total)
# Do these values differ from the estimates from the first part of the assignment?
differ_data<-data.frame(Calculation=c('Without NA', 'Extrapolated'), Mean=c(mean_total, mean_clone_total), Median=c(median_total, median_clone_total))
kable(head(differ_data), format = "markdown")
weekend <- c('saturday','sunday')
clone_data$wday<-tolower(weekdays(strptime(clone_data$date, '%Y-%m-%d')))
clone_data$factorday <- factor((clone_data$wday %in% weekend), labels=c('weekday','weekend'))
clone_steps_by_interval <- aggregate(steps ~ interval + factorday, clone_data, 'mean')
qplot(interval,steps,data=clone_steps_by_interval,facets=factorday~.)+geom_line()
